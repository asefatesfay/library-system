name: Deploy to Cloud Run

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print GCP_PROJECT_ID length
        run: echo "GCP_PROJECT_ID length is ${#GCP_PROJECT_ID}"
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

      - name: Print GCP_SA_KEY length
        run: echo "GCP_SA_KEY length is ${#GCP_SA_KEY}"
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Print gcloud auth list
        run: gcloud auth list

      - name: Print gcloud config list
        run: gcloud config list

      - name: Build and push Docker image
        run: |
          echo "Building Docker image for project ${{ secrets.GCP_PROJECT_ID }}"
          BUILD_ID=$(gcloud builds submit --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/library-system-api --async --format="value(id)")
          echo "Build ID: $BUILD_ID"
          
          # Wait for build to complete
          echo "Waiting for build to complete..."
          while true; do
            STATUS=$(gcloud builds describe $BUILD_ID --format="value(status)")
            echo "Build status: $STATUS"
            if [ "$STATUS" = "SUCCESS" ]; then
              echo "Build completed successfully!"
              break
            elif [ "$STATUS" = "FAILURE" ] || [ "$STATUS" = "TIMEOUT" ] || [ "$STATUS" = "CANCELLED" ]; then
              echo "Build failed with status: $STATUS"
              exit 1
            fi
            sleep 10
          done

      - name: Print gcloud run services list
        run: gcloud run services list --region us-west2

      - name: Deploy to Cloud Run
        run: |
          echo "Deploying to Cloud Run in project ${{ secrets.GCP_PROJECT_ID }}"
          gcloud run deploy library-system-api \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/library-system-api \
            --region us-west2 \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
