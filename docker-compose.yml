version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: library-db
    environment:
      POSTGRES_DB: library_system
      POSTGRES_USER: library_user
      POSTGRES_PASSWORD: library_password
    ports:
      - "5433:5432"  # Changed from 5432 to 5433 to avoid conflict
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U library_user -d library_system"]
      interval: 5s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: library-backend
    environment:
      - DATABASE_URL=postgresql://library_user:library_password@db:5432/library_system
      - JWT_SECRET_KEY=your-super-secret-jwt-key-for-development-only
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - ENVIRONMENT=development
    ports:
      - "8001:8000"  # Changed from 8000 to 8001 to avoid conflict
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: library-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8001
      - NODE_ENV=development
    ports:
      - "3001:3000"  # Changed from 3000 to 3001 to avoid conflict
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    command: npm run dev

  # Redis for caching (optional but good for production-like environment)
  redis:
    image: redis:7-alpine
    container_name: library-redis
    ports:
      - "6380:6379"  # Changed from 6379 to 6380 to avoid conflict
    volumes:
      - redis_data:/data

  # Adminer for database management (optional)
  adminer:
    image: adminer
    container_name: library-adminer
    ports:
      - "8081:8080"  # Changed from 8080 to 8081 to avoid conflict
    depends_on:
      - db
    environment:
      ADMINER_DEFAULT_SERVER: db

volumes:
  postgres_data:
  redis_data:
